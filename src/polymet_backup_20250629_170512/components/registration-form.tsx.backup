import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { EyeIcon, EyeOffIcon } from "lucide-react";

interface RegistrationFormProps {
  formData: {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
    companyName?: string;
    jobTitle?: string;
    phone?: string;
    termsAccepted: boolean;
    privacyAccepted: boolean;
  };
  onChange: (data: Partial<typeof formData>) => void;
  userType: "consumer" | "supplier" | "merchant";
  role?: string;
}

export default function RegistrationForm({
  formData,
  onChange,
  userType,
  role,
}: RegistrationFormProps) {
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const isBusinessUser = userType === "supplier" || userType === "merchant";
  const isAdmin = role?.includes("admin");

  const validateField = (name: string, value: any) => {
    switch (name) {
      case "firstName":
      case "lastName":
        return value.trim() ? "" : "This field is required";
      case "email":
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)
          ? ""
          : "Please enter a valid email address";
      case "password":
        return value.length >= 8
          ? ""
          : "Password must be at least 8 characters";
      case "companyName":
        return isBusinessUser && !value.trim()
          ? "Company name is required"
          : "";
      case "phone":
        return isBusinessUser && isAdmin && !value.trim()
          ? "Phone number is required for admin accounts"
          : "";
      default:
        return "";
    }
  };
  const handleChange = (name: string, value: any) => {
    const error = validateField(name, value);
    setErrors((prev) => ({ ...prev, [name]: error }));
    onChange({ [name]: value });
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="firstName">
            First Name <span className="text-destructive">*</span>
          </Label>
          <Input
            id="firstName"
            value={formData.firstName}
            onChange={(e) => handleChange("firstName", e.target.value)}
            placeholder="Enter your first name"
            className={errors.firstName ? "border-destructive" : ""}
          />
          {errors.firstName && (
            <p className="text-xs text-destructive">{errors.firstName}</p>
          )}
        </div>
        <div className="space-y-2">
          <Label htmlFor="lastName">
            Last Name <span className="text-destructive">*</span>
          </Label>
          <Input
            id="lastName"
            value={formData.lastName}
            onChange={(e) => handleChange("lastName", e.target.value)}
            placeholder="Enter your last name"
            className={errors.lastName ? "border-destructive" : ""}
          />
          {errors.lastName && (
            <p className="text-xs text-destructive">{errors.lastName}</p>
          )}
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="email">
          Email Address <span className="text-destructive">*</span>
        </Label>
        <Input
          id="email"
          type="email"
          value={formData.email}
          onChange={(e) => handleChange("email", e.target.value)}
          placeholder="name@example.com"
          className={errors.email ? "border-destructive" : ""}
        />
        {errors.email && (
          <p className="text-xs text-destructive">{errors.email}</p>
        )}
      </div>
      <div className="space-y-2">
        <Label htmlFor="password">
          Password <span className="text-destructive">*</span>
        </Label>
        <div className="relative">
          <Input
            id="password"
            type={showPassword ? "text" : "password"}
            value={formData.password}
            onChange={(e) => handleChange("password", e.target.value)}
            placeholder="Create a secure password"
            className={errors.password ? "border-destructive pr-10" : "pr-10"}
          />
          <Button
            type="button"
            variant="ghost"
            size="sm"
            className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
            onClick={() => setShowPassword(!showPassword)}
          >
            {showPassword ? (
              <EyeOffIcon className="h-4 w-4 text-muted-foreground" />
            ) : (
              <EyeIcon className="h-4 w-4 text-muted-foreground" />
            )}
          </Button>
        </div>
        {errors.password && (
          <p className="text-xs text-destructive">{errors.password}</p>
        )}
        <p className="text-xs text-muted-foreground">
          Password must be at least 8 characters
        </p>
      </div>

      {isBusinessUser && (
        <>
          <div className="space-y-2">
            <Label htmlFor="companyName">
              Company Name <span className="text-destructive">*</span>
            </Label>
            <Input
              id="companyName"
              value={formData.companyName || ""}
              onChange={(e) => handleChange("companyName", e.target.value)}
              placeholder="Enter your company name"
              className={errors.companyName ? "border-destructive" : ""}
            />
            {errors.companyName && (
              <p className="text-xs text-destructive">{errors.companyName}</p>
            )}
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="jobTitle">Job Title</Label>
              <Input
                id="jobTitle"
                value={formData.jobTitle || ""}
                onChange={(e) => handleChange("jobTitle", e.target.value)}
                placeholder="Enter your job title"
              />            </div>
            <div className="space-y-2">
              <Label htmlFor="phone">
                Phone Number
                {isAdmin && <span className="text-destructive">*</span>}
              </Label>
              <Input
                id="phone"
                type="tel"
                value={formData.phone || ""}
                onChange={(e) => handleChange("phone", e.target.value)}
                placeholder="Enter your phone number"
                className={errors.phone ? "border-destructive" : ""}
              />
              {errors.phone && (
                <p className="text-xs text-destructive">{errors.phone}</p>
              )}
            </div>
          </div>
        </>
      )}

      <div className="space-y-4 pt-2">
        <div className="flex items-start space-x-2">
          <Checkbox
            id="terms"
            checked={formData.termsAccepted}
            onCheckedChange={(checked) =>
              onChange({ termsAccepted: !!checked })
            }
          />
          <div className="grid gap-1.5 leading-none">
            <label
              htmlFor="terms"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              I accept the{" "}
              <a href="#" className="text-primary hover:underline">
                terms and conditions
              </a>{" "}
              <span className="text-destructive">*</span>
            </label>
          </div>
        </div>

        <div className="flex items-start space-x-2">
          <Checkbox
            id="privacy"
            checked={formData.privacyAccepted}
            onCheckedChange={(checked) =>
              onChange({ privacyAccepted: !!checked })
            }
          />
          <div className="grid gap-1.5 leading-none">
            <label
              htmlFor="privacy"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              I accept the{" "}
              <a href="#" className="text-primary hover:underline">
                privacy policy
              </a>{" "}
              <span className="text-destructive">*</span>
            </label>
          </div>
        </div>
      </div>
    </div>
  );
}